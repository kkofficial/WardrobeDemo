package com.d2k.d2kdemo;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.viewpager.widget.ViewPager;

import android.Manifest;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.ColorStateList;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Base64;
import android.view.View;
import android.widget.ImageButton;
import android.widget.Toast;

import com.d2k.d2kdemo.Database.DatabaseName;
import com.d2k.d2kdemo.Database.DatabaseTables.FavoriteWearTable;
import com.d2k.d2kdemo.Database.DatabaseTables.TopWearTable;
import com.d2k.d2kdemo.Database.DatabaseTables.TrouserWeartable;
import com.d2k.d2kdemo.adapters.TopPagerAdapter;
import com.d2k.d2kdemo.adapters.TrouserPagerAdapter;
import com.google.android.material.floatingactionbutton.FloatingActionButton;

import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import static android.icu.text.MessagePattern.ArgType.SELECT;

/*Created by kishor on -April/29/2020
* D2KDemo
* */
public class MainActivity extends AppCompatActivity {

    private static final String[] INITIAL_PERMS={
            Manifest.permission.CAMERA
    };
    private static final int INITIAL_REQUEST=100;
    private static final String MY_PREFS_NAME ="D2KPREF" ;
    ViewPager top_viewPager,trouser_viewPager;
    TopPagerAdapter topPagerAdapter;
    TrouserPagerAdapter trouserPagerAdapter;
    private FloatingActionButton fabTopWear,fabTrouserWear,fabShuffleBtn;
    private ImageButton favFabButton;
    private static final  int TOP_WEAR_REQUEST_CAMERA = 1;
    private  static final int TOP_WEAR_REQUEST_GALLERY = 2;
    private static final int TROUSER_WEAR_REQUEST_CAMERA = 3;
    private static final int TROUSER_WEAR_REQUEST_GALLERY = 4;
    ArrayList<TopWearTable> topWearList;
    ArrayList<TrouserWeartable>trouserWearList;
    ArrayList<TrouserWeartable> trouserWearArrayList;
    ArrayList<TopWearTable>topWearArrayList;
    private   List<FavoriteWearTable> favWearList;
    public  static String imageID;
    public  static String trouserImageID;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            requestPermissions(INITIAL_PERMS, INITIAL_REQUEST);
        }

        top_viewPager = findViewById(R.id.vp_top);
        trouser_viewPager = findViewById(R.id.vp_trouser);

        fabTopWear =findViewById(R.id.fab_top_wear);
        fabTrouserWear = findViewById(R.id.fab_trouser_wear);
        favFabButton = findViewById(R.id.fab_favroite_wear);
        fabShuffleBtn = findViewById(R.id.fab_shuffle_wear);

        trouserWearArrayList = new ArrayList<>();
        topWearArrayList = new ArrayList<>();

        trouserWearList = new ArrayList<>();
        topWearList = new ArrayList<>();


        SharedPreferences prefs = getSharedPreferences(MY_PREFS_NAME, MODE_PRIVATE);
        boolean valueAdded = prefs.getBoolean("isDefaultValueAdded", false);

        if(!valueAdded)
        addDefalutValues();


        fetchTopWearData();
        fetchTrouserDataFromDatbase();


        top_viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            public void onPageScrollStateChanged(int state) {}
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
//                Toast.makeText(getApplicationContext(),"imageid"+ imageID,Toast.LENGTH_SHORT).show();
                favFabButton.setBackground(getResources().getDrawable(R.drawable.round_button));

            }

            public void onPageSelected(int position) {
                // Check if this is the page you want.
            }
        });

        trouser_viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            public void onPageScrollStateChanged(int state) {}
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
//                Toast.makeText(getApplicationContext(),"troserimageid"+trouserImageID,Toast.LENGTH_SHORT).show();
                favFabButton.setBackground(getResources().getDrawable(R.drawable.round_button));

            }

            public void onPageSelected(int position) {
                // Check if this is the page you want.
            }
        });

    }



    private void addDefalutValues() {
        TopWearTable topWearTable = new TopWearTable();

        topWearTable.setImage("");
        topWearList.add(topWearTable);
        for(int i=0;i<1;i++){

            addDefultImagesinDatabase(topWearList.get(i).getImage());
        }
        TrouserWeartable trouserWeartable= new TrouserWeartable();

        trouserWeartable.setImage("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");
        trouserWearList.add(trouserWeartable);

        for(int i=0;i<1;i++) {
            addTrouserListdata(trouserWearList.get(i).getImage());
        }


        setAdapter(topWearList);
        setTrouserAdapter(trouserWearList);

        SharedPreferences.Editor editor = getSharedPreferences(MY_PREFS_NAME, MODE_PRIVATE).edit();
        editor.putBoolean("isDefaultValueAdded", true);
        editor.apply();
    }

    private void fetchTopWearData() {

        class  FetchWearData extends AsyncTask<Void,Void,Void>{

            @Override
            protected Void doInBackground(Void... voids) {

                topWearArrayList = (ArrayList<TopWearTable>) DatabaseName.getInstance(getApplicationContext())
                        .getWardrobeDatabase()
                        .dataAccessClass()
                        .getAllTopWearData();

                return null;
            }

            @Override
            protected void onPostExecute(Void aVoid) {
                super.onPostExecute(aVoid);
                if(topWearArrayList.size() >0)
                setAdapter(topWearArrayList);
            }
        }

        FetchWearData fetchWearData = new FetchWearData();
        fetchWearData.execute();



    }

    private void addTrouserListdata(final String trouserWearList) {

        class SaveImages extends AsyncTask<Void, Void, Void> {

            @Override
            protected Void doInBackground(Void... voids) {
                TrouserWeartable records = new TrouserWeartable();
                records.setImage(trouserWearList);

                //adding to database
                DatabaseName.getInstance(getApplicationContext()).getWardrobeDatabase()
                        .dataAccessClass()
                        .insert(records);
                return null;
            }

            @Override
            protected void onPostExecute(Void aVoid) {
                super.onPostExecute(aVoid);
                Toast.makeText(getApplicationContext(), "Saved", Toast.LENGTH_LONG).show();

              trouserPagerAdapter.notifyDataSetChanged();
//                trouser_viewPager.getAdapter().notifyDataSetChanged();
            }
        }
        SaveImages st = new SaveImages();
        st.execute();
    }

    private void setAdapter(ArrayList<TopWearTable> topWearList) {
        topPagerAdapter = new TopPagerAdapter(MainActivity.this, topWearList);
        top_viewPager.setAdapter(topPagerAdapter);
        topPagerAdapter.notifyDataSetChanged();
    }

    private void fetchTrouserDataFromDatbase() {



        class  FetchWearData extends AsyncTask<Void,Void,Void>{

            @Override
            protected Void doInBackground(Void... voids) {


                try {
                    trouserWearArrayList = (ArrayList<TrouserWeartable>) DatabaseName.getInstance(getApplicationContext())
                                    .getWardrobeDatabase()
                                    .dataAccessClass()
                                    .getAllTrouserWearData();
                } catch (Exception e) {
                    e.printStackTrace();
                }

                return null;
            }

            @Override
            protected void onPostExecute(Void aVoid) {
                super.onPostExecute(aVoid);

                if(trouserWearArrayList.size() >0)
                setTrouserAdapter(trouserWearArrayList);
            }
        }

        FetchWearData fetchWearData = new FetchWearData();
        fetchWearData.execute();


    }

    private void setTrouserAdapter(ArrayList<TrouserWeartable> trouserWearList) {

        trouserPagerAdapter = new TrouserPagerAdapter(MainActivity.this, trouserWearList);
        trouser_viewPager.setAdapter(trouserPagerAdapter);
        trouserPagerAdapter.notifyDataSetChanged();
    }

    private void addDefultImagesinDatabase(final String defaultImage) {

        class SaveImages extends AsyncTask<Void, Void, Void> {

            @Override
            protected Void doInBackground(Void... voids) {
                TopWearTable records = new TopWearTable();
                records.setImage(defaultImage);

                //adding to database
                DatabaseName.getInstance(getApplicationContext()).getWardrobeDatabase()
                        .dataAccessClass()
                        .insert(records);
                return null;
            }

            @Override
            protected void onPostExecute(Void aVoid) {
                super.onPostExecute(aVoid);
//                Toast.makeText(getApplicationContext(), "Saved", Toast.LENGTH_LONG).show();
          topPagerAdapter.notifyDataSetChanged();
            }
        }
        SaveImages st = new SaveImages();
        st.execute();
    }

    @Override
    protected void onResume() {
        super.onResume();


        fabTopWear.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectImage(MainActivity.this,TOP_WEAR_REQUEST_CAMERA,TOP_WEAR_REQUEST_GALLERY);
                favFabButton.setBackground(getResources().getDrawable(R.drawable.round_button));
            }
        });

        fabTrouserWear.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectImage(MainActivity.this,TROUSER_WEAR_REQUEST_CAMERA,TROUSER_WEAR_REQUEST_GALLERY);
                favFabButton.setBackground(getResources().getDrawable(R.drawable.round_button));
            }
        });

        fabShuffleBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                favFabButton.setBackground(getResources().getDrawable(R.drawable.round_button));
                    getRandomWear();
            }
        });

        favFabButton.setOnClickListener(new View.OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.M)
            @Override
            public void onClick(View v) {
//                Toast.makeText(getApplicationContext(),"clicked"+imageID,Toast.LENGTH_SHORT).show();
                favFabButton.setBackground(getResources().getDrawable(R.drawable.round_button_onclick));

                 saveFavDetails(imageID.concat(trouserImageID));
            }
        });
    }

    private void saveFavDetails(final String favWear) {


        class  FavhWearData extends AsyncTask<Void,Void,Void>{

            @Override
            protected Void doInBackground(Void... voids) {

                FavoriteWearTable favoriteWearTable = new FavoriteWearTable();
                favoriteWearTable.setFavWearImageID(favWear);
                DatabaseName.getInstance(getApplicationContext()).getWardrobeDatabase()
                        .dataAccessClass()
                        .insert(favoriteWearTable);

                return null;
            }

            @Override
            protected void onPostExecute(Void aVoid) {
                super.onPostExecute(aVoid);

                Toast.makeText(getApplicationContext(),"Fav Wear Saved",Toast.LENGTH_SHORT).show();

            }
        }

        FavhWearData favhWearData = new FavhWearData();
        favhWearData.execute();



    }

    private void getRandomWear() {

       class  FetchWearData extends AsyncTask<Void,Void,Void>{

            @Override
            protected Void doInBackground(Void... voids) {

                try {
                    trouserWearArrayList = (ArrayList<TrouserWeartable>) DatabaseName.getInstance(getApplicationContext())
                            .getWardrobeDatabase()
                            .dataAccessClass()
                            .getRandomTrouserWearData();
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    topWearArrayList = (ArrayList<TopWearTable>) DatabaseName.getInstance(getApplicationContext())
                            .getWardrobeDatabase()
                            .dataAccessClass()
                            .getRandomTopWearData();
                } catch (Exception e) {
                    e.printStackTrace();
                }

                return null;
            }

            @Override
            protected void onPostExecute(Void aVoid) {
                super.onPostExecute(aVoid);

                setTrouserAdapter(trouserWearArrayList);
                setAdapter(topWearArrayList);
            }
        }

        FetchWearData fetchWearData = new FetchWearData();
        fetchWearData.execute();

    }


    private void selectImage(Context context, final int REQUEST_CAMERA, final int REQUEST_GALLERY) {
        final CharSequence[] options = { "Take Photo", "Choose from Gallery","Cancel" };

        AlertDialog.Builder builder = new AlertDialog.Builder(context);
        builder.setTitle("Choose your profile picture");

        builder.setItems(options, new DialogInterface.OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int item) {

                if (options[item].equals("Take Photo")) {
                    Intent takePicture = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
                    startActivityForResult(takePicture, REQUEST_CAMERA);

                } else if (options[item].equals("Choose from Gallery")) {
                    Intent pickPhoto = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                    startActivityForResult(pickPhoto , REQUEST_GALLERY);

                } else if (options[item].equals("Cancel")) {
                    dialog.dismiss();
                }
            }
        });
        builder.show();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode != RESULT_CANCELED) {
            switch (requestCode) {
                case TOP_WEAR_REQUEST_CAMERA:
//                    Toast.makeText(getApplicationContext(),"top cam",Toast.LENGTH_SHORT).show();
                    if (resultCode == RESULT_OK && data != null) {
//                        Bitmap selectedImage = (Bitmap) data.getExtras().get("data");
                        Bitmap bmp = (Bitmap) data.getExtras().get("data");
                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                        bmp.compress(Bitmap.CompressFormat.PNG, 100, stream);
                        byte[] byteArray = stream.toByteArray();
                        bmp.recycle();
                        String encoded = Base64.encodeToString(byteArray, Base64.DEFAULT);
                        TopWearTable topWearTable  = new TopWearTable();
                        topWearTable.setImage(encoded);
                        topWearList.add(topWearTable);
                        addDefultImagesinDatabase(encoded);
                        setAdapter(topWearList);
                    }

                    break;
                case TOP_WEAR_REQUEST_GALLERY:
//                    Toast.makeText(getApplicationContext(),"top gall",Toast.LENGTH_SHORT).show();
                    if (resultCode == RESULT_OK && data != null) {
                 final       Uri selectedImage = data.getData();
                        String[] filePathColumn = {MediaStore.Images.Media.DATA};
                        if (selectedImage != null) {

                            final InputStream imageStream;
                            String encoded ="";
                            try {
                                imageStream = getContentResolver().openInputStream(selectedImage);
                                final Bitmap selectedImage1 = BitmapFactory.decodeStream(imageStream);
                                 encoded = encodeImage(selectedImage1);
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            }

                            TopWearTable topWearTable = new TopWearTable();
                            topWearTable.setImage(encoded);
                                topWearList.add(topWearTable);
                                addDefultImagesinDatabase(encoded);
                                setAdapter(topWearList);

                        }

                    }
                    break;

                case  TROUSER_WEAR_REQUEST_CAMERA:

//                    Toast.makeText(getApplicationContext(),"trouser cam",Toast.LENGTH_SHORT).show();
                    if (resultCode == RESULT_OK && data != null) {
//                        Bitmap selectedImage = (Bitmap) data.getExtras().get("data");
                        Bitmap bmp = (Bitmap) data.getExtras().get("data");
                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                        bmp.compress(Bitmap.CompressFormat.PNG, 100, stream);
                        byte[] byteArray = stream.toByteArray();
                        bmp.recycle();
                        String encoded = Base64.encodeToString(byteArray, Base64.DEFAULT);
                        TrouserWeartable trouserWeartable=new TrouserWeartable();
                        trouserWeartable.setImage(encoded);
                        trouserWearList.add(trouserWeartable);
                        addTrouserListdata(encoded);
                        setTrouserAdapter(trouserWearList);
                    }

                    break;

                case TROUSER_WEAR_REQUEST_GALLERY:
//                    Toast.makeText(getApplicationContext(),"trouser cam",Toast.LENGTH_SHORT).show();
                    if (resultCode == RESULT_OK && data != null) {
                        Uri selectedImage = data.getData();
                        String[] filePathColumn = {MediaStore.Images.Media.DATA};
                        if (selectedImage != null) {


                            final InputStream imageStream;
                            String encoded ="";
                            try {
                                imageStream = getContentResolver().openInputStream(selectedImage);
                                final Bitmap selectedImage1 = BitmapFactory.decodeStream(imageStream);
                                encoded = encodeImage(selectedImage1);
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            }
                            TrouserWeartable trouserWeartable=new TrouserWeartable();
                            trouserWeartable.setImage(encoded);
                                trouserWearList.add(trouserWeartable);
                                addTrouserListdata(encoded);
                                setTrouserAdapter(trouserWearList);

                        }

                    }
                    break;

                default:
                    Toast.makeText(getApplicationContext(),"cancel",Toast.LENGTH_SHORT).show();


            }
        }
    }

    private String encodeImage(Bitmap bm)
    {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bm.compress(Bitmap.CompressFormat.JPEG,100,baos);
        byte[] b = baos.toByteArray();
        String encImage = Base64.encodeToString(b, Base64.DEFAULT);

        return encImage;
    }
}
